#!/usr/bin/env python3

import os
import sys
import time
import argparse
from pathlib import Path

def is_hidden(path, target_dir):
    """Check if a path is hidden relative to the target directory"""
    relative_path = path.relative_to(target_dir)
    return any(part.startswith('.') for part in relative_path.parts)

def main():
    parser = argparse.ArgumentParser(description='Rename files to include timestamps')
    parser.add_argument('-d', '--directory', default=os.getcwd(),
                      help='Directory containing files to rename')
    parser.add_argument('-n', '--dry-run', action='store_true',
                      help='Show what would be renamed without actually renaming')
    parser.add_argument('-a', '--all', action='store_true',
                      help='Include hidden files and directories')
    parser.add_argument('-r', '--recursive', action='store_true',
                      help='Scan directories recursively')
    args = parser.parse_args()

    directory = Path(args.directory)
    if not directory.is_dir():
        print(f"Error: '{directory}' is not a directory", file=sys.stderr)
        sys.exit(1)

    if not args.dry_run:
        print(f"WARNING: This will rename all files in '{directory}' to include timestamps.")
        confirmation = input("Type YES (in uppercase) to continue: ")
        if confirmation != "YES":
            print("Operation cancelled.")
            sys.exit(1)

    run_at = int(time.time() * 1e6)  # Current time in microseconds

    # Use rglob for recursive scanning or glob for non-recursive
    scan_method = directory.rglob if args.recursive else directory.glob
    pattern = "**/*" if args.recursive else "*"

    for file_path in scan_method(pattern):
        try:
            # Skip hidden files and directories unless --all is specified
            if not args.all and is_hidden(file_path, directory):
                continue
            if not file_path.is_file():
                continue

            # Get timestamp
            timestamp = os.stat(file_path).st_mtime_ns

            # Get file extension
            extension = file_path.suffix
            if not extension:
                extension = ""

            # Create new filename with timestamp
            i = 0
            while True:
                new_name = file_path.parent / f"{timestamp}-{run_at}-{i}{extension}"
                if not new_name.exists():
                    break
                i += 1

            # Rename the file
            if args.dry_run:
                print(f"Would rename: {file_path} -> {new_name.name}")
            else:
                file_path.rename(new_name)
                print(f"Renamed: {file_path} -> {new_name.name}")

        except Exception as e:
            print(f"Error processing {file_path}: {e}", file=sys.stderr)

if __name__ == "__main__":
    main() 